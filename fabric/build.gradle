plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive = false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    // TODO: Figure out why jei is being fucky wucky
//    runtimeOnly ("mezz.jei:jei-$rootProject.minecraft_version-fabric:$rootProject.jei_version")

//    modImplementation "io.wispforest:owo-lib:${rootProject.owo_version}"
    modImplementation "curse.maven:modmenu-308702:5810603"
    modImplementation include ("maven.modrinth:midnightlib:${rootProject.midnightlib_version}")
}

processResources {
    var replaceProperties = [
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_group              : mod_group,
            mod_description        : mod_description,
            entry_point_main       : rootProject.fabric_entry_point_main,
            entry_point_client     : rootProject.fabric_entry_point_client
    ]
    inputs.properties replaceProperties

    filesMatching('fabric.mod.json') {
        expand replaceProperties
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
